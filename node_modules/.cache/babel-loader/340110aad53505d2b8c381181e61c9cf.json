{"ast":null,"code":"const apiUrl = 'https://opendata.resas-portal.go.jp/';\n/**\n * 地域経済分析システムAPIのラッパー\n * @param {string} path 具体的なAPIエンドポイント(GETリクエストを含む)\n * @return APIからのリスポンスのプロミス\n * @throws {Error}\n */\n\nconst fetchNationalStatistics = async path => {\n  const fullUrl = apiUrl + path;\n  const response = await window.fetch(fullUrl, {\n    headers: {\n      'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY\n    }\n  });\n\n  if (response.status !== 200) {\n    throw new Error(`${fullUrl} から${response.status}のリスポンスが返されました。`);\n  }\n\n  const json = await response.json();\n\n  if (!json.result) {\n    throw new Error(`${fullUrl} からのリスポンスのbodyの形式が間違っています。`);\n  }\n\n  return json.result;\n};\n/**\n * 都道府県名を地域経済分析システムAPIから取得する用のラッパー\n * @return 都道府県名と都道府県番号を含むプロミス\n * @throws {Error}\n */\n\n\nconst fetchPrefectureNames = () => fetchNationalStatistics('api/v1/prefectures/');\n/**\n * 都道府県の人口データを地域経済分析システムAPIから取得する用のラッパー\n * @param {string|number} prefCode 都道府県コード\n * @param {string} populationType 人口の種類(総人口:'total', 年少人口: 'youth', 生産年齢人\n * 口: 'productiveAge', 老年人口: 'elderly')\n * @param {*} lowerYearBoundary 年下方境界\n * @param {*} upperYearBoundary 年上方境界\n * @return 都道府県人口データ含むプロミス\n * @throws {Error}\n */\n\n\nconst fetchPrefecturePopulation = async (prefCode, populationType, lowerYearBoundary, upperYearBoundary) => {\n  const populationTypes = {\n    total: 0,\n    youth: 1,\n    productiveAge: 2,\n    elderly: 3\n  };\n  const response = await fetchNationalStatistics(`api/v1/population/composition/perYear?cityCode=-&prefCode=${prefCode}`);\n  return response.data[populationTypes[populationType]].data.filter(({\n    year\n  }) => year >= lowerYearBoundary && year <= upperYearBoundary);\n};\n\nexport default {\n  fetchPrefectureNames,\n  fetchPrefecturePopulation\n};","map":{"version":3,"sources":["/Users/njn0te/Documents/yumemi_kadai/national-data-explorer/src/api/nationalStatistics.js"],"names":["apiUrl","fetchNationalStatistics","path","fullUrl","response","window","fetch","headers","process","env","REACT_APP_RESAS_API_KEY","status","Error","json","result","fetchPrefectureNames","fetchPrefecturePopulation","prefCode","populationType","lowerYearBoundary","upperYearBoundary","populationTypes","total","youth","productiveAge","elderly","data","filter","year"],"mappings":"AAAA,MAAMA,MAAM,GAAG,sCAAf;AAEA;;;;;;;AAMA,MAAMC,uBAAuB,GAAG,MAAMC,IAAN,IAAc;AAC5C,QAAMC,OAAO,GAAGH,MAAM,GAAGE,IAAzB;AACA,QAAME,QAAQ,GAAG,MAAMC,MAAM,CAACC,KAAP,CACrBH,OADqB,EAErB;AACEI,IAAAA,OAAO,EAAE;AACP,mBAAaC,OAAO,CAACC,GAAR,CAAYC;AADlB;AADX,GAFqB,CAAvB;;AASA,MAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAW,GAAET,OAAQ,MAAKC,QAAQ,CAACO,MAAO,gBAA1C,CAAN;AACD;;AAED,QAAME,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAT,EAAnB;;AACA,MAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChB,UAAM,IAAIF,KAAJ,CAAW,GAAET,OAAQ,4BAArB,CAAN;AACD;;AAED,SAAOU,IAAI,CAACC,MAAZ;AACD,CArBD;AAuBA;;;;;;;AAKA,MAAMC,oBAAoB,GAAG,MAC3Bd,uBAAuB,CAAC,qBAAD,CADzB;AAGA;;;;;;;;;;;;AAUA,MAAMe,yBAAyB,GAAG,OAChCC,QADgC,EAEhCC,cAFgC,EAGhCC,iBAHgC,EAIhCC,iBAJgC,KAK7B;AACH,QAAMC,eAAe,GAAG;AACtBC,IAAAA,KAAK,EAAE,CADe;AAEtBC,IAAAA,KAAK,EAAE,CAFe;AAGtBC,IAAAA,aAAa,EAAE,CAHO;AAItBC,IAAAA,OAAO,EAAE;AAJa,GAAxB;AAOA,QAAMrB,QAAQ,GAAG,MAAMH,uBAAuB,CAC3C,6DAA4DgB,QAAS,EAD1B,CAA9C;AAIA,SAAOb,QAAQ,CAACsB,IAAT,CAAcL,eAAe,CAACH,cAAD,CAA7B,EAA+CQ,IAA/C,CAAoDC,MAApD,CACL,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,IAAIT,iBAAR,IAA6BS,IAAI,IAAIR,iBAD9C,CAAP;AAGD,CApBD;;AAsBA,eAAe;AACbL,EAAAA,oBADa;AAEbC,EAAAA;AAFa,CAAf","sourcesContent":["const apiUrl = 'https://opendata.resas-portal.go.jp/'\n\n/**\n * 地域経済分析システムAPIのラッパー\n * @param {string} path 具体的なAPIエンドポイント(GETリクエストを含む)\n * @return APIからのリスポンスのプロミス\n * @throws {Error}\n */\nconst fetchNationalStatistics = async path => {\n  const fullUrl = apiUrl + path\n  const response = await window.fetch(\n    fullUrl,\n    {\n      headers: {\n        'X-API-KEY': process.env.REACT_APP_RESAS_API_KEY\n      }\n    }\n  )\n\n  if (response.status !== 200) {\n    throw new Error(`${fullUrl} から${response.status}のリスポンスが返されました。`)\n  }\n\n  const json = await response.json()\n  if (!json.result) {\n    throw new Error(`${fullUrl} からのリスポンスのbodyの形式が間違っています。`)\n  }\n\n  return json.result\n}\n\n/**\n * 都道府県名を地域経済分析システムAPIから取得する用のラッパー\n * @return 都道府県名と都道府県番号を含むプロミス\n * @throws {Error}\n */\nconst fetchPrefectureNames = () =>\n  fetchNationalStatistics('api/v1/prefectures/')\n\n/**\n * 都道府県の人口データを地域経済分析システムAPIから取得する用のラッパー\n * @param {string|number} prefCode 都道府県コード\n * @param {string} populationType 人口の種類(総人口:'total', 年少人口: 'youth', 生産年齢人\n * 口: 'productiveAge', 老年人口: 'elderly')\n * @param {*} lowerYearBoundary 年下方境界\n * @param {*} upperYearBoundary 年上方境界\n * @return 都道府県人口データ含むプロミス\n * @throws {Error}\n */\nconst fetchPrefecturePopulation = async (\n  prefCode,\n  populationType,\n  lowerYearBoundary,\n  upperYearBoundary\n) => {\n  const populationTypes = {\n    total: 0,\n    youth: 1,\n    productiveAge: 2,\n    elderly: 3\n  }\n\n  const response = await fetchNationalStatistics(\n    `api/v1/population/composition/perYear?cityCode=-&prefCode=${prefCode}`\n  )\n\n  return response.data[populationTypes[populationType]].data.filter(\n    ({ year }) => year >= lowerYearBoundary && year <= upperYearBoundary\n  )\n}\n\nexport default {\n  fetchPrefectureNames,\n  fetchPrefecturePopulation\n}\n"]},"metadata":{},"sourceType":"module"}