{"ast":null,"code":"var _jsxFileName = \"/Users/njn0te/Documents/yumemi_kadai/national-data-explorer/src/app/dataExplorer/container.jsx\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPrefectureNames, togglePrefecture } from 'store/prefectureData/actions';\nimport './style.css';\nimport { Paper, CircularProgress } from '@material-ui/core';\nimport { Filter } from './filter/view';\nimport { Chart } from './chart/view';\n/**\n * Recharts用に都道府県データの形を変更する。\n * @param {object} prefectures 都道府県に関するデータ\n * @returns {object[]} Rechartsに使える形式の都道府県データ\n */\n\nconst formatChartData = prefectures => {\n  // 一時的に年ごとにオブジェクトで保管する ({ 1970: { 大阪: '123', 東京: '321' } })\n  const intermediaryObject = Object.values(prefectures).filter(({\n    populationData\n  }) => populationData).reduce((chartData, {\n    name,\n    populationData\n  }) => {\n    populationData.forEach(({\n      value,\n      year\n    }) => {\n      chartData[year] = { ...chartData[year],\n        [name]: value\n      };\n    });\n    return chartData;\n  }, {});\n  return Object.entries(intermediaryObject).map(([year, values]) => {\n    values.name = year;\n    return values;\n  });\n};\n\nconst DataExplorerWrapper = ({\n  children\n}) => /*#__PURE__*/React.createElement(Paper, {\n  className: \"data-explorer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }\n}, \"\\u90FD\\u9053\\u5E9C\\u770C\"), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"data-explorer-contents\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }\n}, children));\n/**\n * 都道府県のデータを調べる為のコンポーネント。\n * @param {object} props\n * @param {object} props.prefectures 都道府県に関するデータ\n * @param {boolean} props.prefectureNamesLoading 都道府県名のロード状態\n * @param {boolean} props.prefecturePopulationLoading 都道府県人口ロード状態\n * @param {string} props.prefectureNameError 都道府県名取得に発生したエラーメッセージ\n * @param {string} props.prefecturePopulationError 都道府県人口取得に発生したエラーメ\n * ッセージ\n * @param {() => object} props.fetchPrefectureNames 都道府県名取得を開始するアクショ\n * ンクリエーター\n * @param {(event: object) => object} props.togglePrefecture 都道府県を選択する用の\n * アクションクリエーター\n */\n\n\nconst DataExplorerContainer = ({\n  prefectures,\n  prefectureNamesLoading,\n  prefecturePopulationLoading,\n  prefectureNameError,\n  prefecturePopulationError,\n  fetchPrefectureNames,\n  togglePrefecture\n}) => {\n  useEffect(() => {\n    fetchPrefectureNames();\n  }, [fetchPrefectureNames]);\n\n  if (prefectureNameError) {\n    return /*#__PURE__*/React.createElement(DataExplorerWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    }, prefectureNameError);\n  }\n\n  if (prefectureNamesLoading) {\n    return /*#__PURE__*/React.createElement(DataExplorerWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(DataExplorerWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Filter, {\n    items: prefectures,\n    onChange: event => {\n      const prefCode = event.target.name;\n      togglePrefecture(prefCode, !prefectures[prefCode].populationData);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chart, {\n    chartData: formatChartData(prefectures),\n    legendNames: Object.values(prefectures).filter(({\n      selected\n    }) => selected).map(({\n      name\n    }) => name),\n    processing: prefecturePopulationLoading,\n    messageOnEmpty: \"\\u90FD\\u9053\\u5E9C\\u770C\\u3092\\u9078\\u629E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\",\n    error: prefecturePopulationError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = ({\n  prefectureData\n}) => prefectureData;\n\nconst mapDispatchToProps = {\n  fetchPrefectureNames,\n  togglePrefecture\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(DataExplorerContainer);","map":{"version":3,"sources":["/Users/njn0te/Documents/yumemi_kadai/national-data-explorer/src/app/dataExplorer/container.jsx"],"names":["React","useEffect","connect","fetchPrefectureNames","togglePrefecture","Paper","CircularProgress","Filter","Chart","formatChartData","prefectures","intermediaryObject","Object","values","filter","populationData","reduce","chartData","name","forEach","value","year","entries","map","DataExplorerWrapper","children","DataExplorerContainer","prefectureNamesLoading","prefecturePopulationLoading","prefectureNameError","prefecturePopulationError","event","prefCode","target","selected","mapStateToProps","prefectureData","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  fetchPrefectureNames,\n  togglePrefecture\n} from 'store/prefectureData/actions'\nimport './style.css'\nimport { Paper, CircularProgress } from '@material-ui/core'\nimport { Filter } from './filter/view'\nimport { Chart } from './chart/view'\n\n/**\n * Recharts用に都道府県データの形を変更する。\n * @param {object} prefectures 都道府県に関するデータ\n * @returns {object[]} Rechartsに使える形式の都道府県データ\n */\nconst formatChartData = prefectures => {\n  // 一時的に年ごとにオブジェクトで保管する ({ 1970: { 大阪: '123', 東京: '321' } })\n  const intermediaryObject = Object.values(prefectures)\n    .filter(({ populationData }) => populationData)\n    .reduce((chartData, { name, populationData }) => {\n      populationData.forEach(({ value, year }) => {\n        chartData[year] = { ...chartData[year], [name]: value }\n      })\n      return chartData\n    }, {})\n\n  return Object.entries(intermediaryObject)\n    .map(([year, values]) => {\n      values.name = year\n      return values\n    })\n}\n\nconst DataExplorerWrapper = ({ children }) => (\n  <Paper className='data-explorer'>\n    <h3>都道府県</h3>\n    <div className='data-explorer-contents'>\n      {children}\n    </div>\n  </Paper>\n)\n\n/**\n * 都道府県のデータを調べる為のコンポーネント。\n * @param {object} props\n * @param {object} props.prefectures 都道府県に関するデータ\n * @param {boolean} props.prefectureNamesLoading 都道府県名のロード状態\n * @param {boolean} props.prefecturePopulationLoading 都道府県人口ロード状態\n * @param {string} props.prefectureNameError 都道府県名取得に発生したエラーメッセージ\n * @param {string} props.prefecturePopulationError 都道府県人口取得に発生したエラーメ\n * ッセージ\n * @param {() => object} props.fetchPrefectureNames 都道府県名取得を開始するアクショ\n * ンクリエーター\n * @param {(event: object) => object} props.togglePrefecture 都道府県を選択する用の\n * アクションクリエーター\n */\nconst DataExplorerContainer = ({\n  prefectures,\n  prefectureNamesLoading,\n  prefecturePopulationLoading,\n  prefectureNameError,\n  prefecturePopulationError,\n  fetchPrefectureNames,\n  togglePrefecture\n}) => {\n  useEffect(() => {\n    fetchPrefectureNames()\n  }, [fetchPrefectureNames])\n\n  if (prefectureNameError) {\n    return <DataExplorerWrapper>{prefectureNameError}</DataExplorerWrapper>\n  }\n  if (prefectureNamesLoading) {\n    return <DataExplorerWrapper><CircularProgress /></DataExplorerWrapper>\n  }\n\n  return (\n    <DataExplorerWrapper>\n      <Filter\n        items={prefectures}\n        onChange={(event) => {\n          const prefCode = event.target.name\n          togglePrefecture(prefCode, !prefectures[prefCode].populationData)\n        }}\n      />\n      <Chart\n        chartData={formatChartData(prefectures)}\n        legendNames={\n          Object.values(prefectures)\n            .filter(({ selected }) => selected)\n            .map(({ name }) => name)\n        }\n        processing={prefecturePopulationLoading}\n        messageOnEmpty='都道府県を選択してください。'\n        error={prefecturePopulationError}\n      />\n    </DataExplorerWrapper>\n  )\n}\n\nconst mapStateToProps = ({ prefectureData }) => prefectureData\nconst mapDispatchToProps = { fetchPrefectureNames, togglePrefecture }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataExplorerContainer)\n"]},"metadata":{},"sourceType":"module"}